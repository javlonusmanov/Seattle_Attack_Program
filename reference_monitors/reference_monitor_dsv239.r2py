"""
This security layer interposes size restrictions on a file.  If a call is made 
to setmaxfilesize, the file must not be allowed to grow larger than the 
specified value.  If a user tries to write that starts before the end of file 
and extends past the allowed size, bytes past the allowed size are discarded.  
If a write starts at or past the allowed size, a SeekPastEndOfFileError must 
be raised.  If a file already contains more than the maximum file size bytes 
when the call is made, the file must be truncated so that it is of the 
appropriate size. It should also raise ValueError if the size to be set is not 
valid(e.g. less than 0 or non-number )



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 

class SecureFile():
    size = 0
    def __init__(self,file):
        # globals
        mycontext['debug'] = False
        # starts as "None", which allows writes of any size.
        mycontext['size'] = None
        # local (per object) reference to the underlying file
        self.file = file
        mycontext['write'] = True
        mycontext['append'] = True

            
    def setmaxfilesize(self,size):
        mycontext['size'] = size
        
    def writeat(self,data,offset):
        try:
            if not mycontext['write'] and not mycontext['append']: #WRITE = FALSE and APPEND = FALSE
                raise ValueError
            if not mycontext['write'] and mycontext['append']:  #WRITE = FALSE and APPEND = TRUE
                if (offset == self.size):
                    self.file.writeat(data,offset)
                    self.size = self.size + len(data)
                if offset < self.size and (len(data) > (self.size-offset)):
                    str=""
                    j= (self.size - offset)
                    for i in data:
                        if j > 0:
                            j= j - 1
                        else:
                            str += i
                    self.file.writeat(str,self.size)
                    self.size = self.size + len(str)
                else:
                    return
            if mycontext['write'] and not mycontext['append']:  #WRITE = TRUE and APPEND = FALSE
                if(offset > self.size) or self.size == 0:
                    data = data[:(offset)]
                    #return
                else:
                    str = ""
                    j = 0
                    for i in data:
                        if j < (self.size - offset):
                            str += i
                            j= j + 1
                    self.file.writeat(str,offset)
            if mycontext['write'] and mycontext['append']:    #WRITE = TRUE and APPEND = TRUE
                dataSize = len(data)
                if mycontext['size'] and (offset + dataSize) > mycontext['size']:
                  data = data[:(mycontext['size'] - offset)]
                if mycontext['size'] and offset >= mycontext['size']:
                  raise SeekPastEndOfFileError("Tried to write past the end!.\n")

                else:
                    self.file.writeat(data,offset)
                    if self.size < (offset + len(data)):
                        self.size = offset + len(data)
                        data = data[:(offset)]
        except (ValueError, RepyArgumentError, FileClosedError, SeekPastEndOfFileError):
            pass
    
    def readat(self,bytes,offset):
        return self.file.readat(bytes,offset)

    def close(self):
        return self.file.close()

def secure_openfile(filename,create):
    f = openfile(filename,create)
    return SecureFile(f)

def secure_listfiles():
    return listfiles()

def secure_removefile(filename):
    return removefile(filename)

# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
