class SecureFile():
 def __init__(self,file):
  # globals
  mycontext['debug'] = False 
  # starts as "None", which allows writes of any size.
  mycontext['size'] = None
  # local (per object) reference to the underlying file
  self.file = file
  self.fileSize = 0
  self.fileSize = len(fileContent)
  self.fileSizeLock = createlock()
  fileContent = self.file.readat(None, 0)
  
 def setmaxfilesize(self,size):

  self.fileSizeLock.acquire(True)
  try:
      #raise ValueError if size is not an int or long
      if not isinstance( size, ( int, long ) ):
       raise ValueError("size of file is not an int or long")

      #raise ValueError if size is less than zero
      if size < 0:
       raise ValueError("size < 0")
    
       #if size < self.fileSize:
       mycontext['size'] = size
  finally:
      self.fileSizeLock.release()

 def writeat(self,data,offset):

  self.fileSizeLock.acquire(True)
  try:
     #raise ValueError if offset is not an int or long
   if not isinstance( offset, ( int, long ) ):
     raise ValueError("Offset not an int/long")

    #raise ValueError if Offset is less than zero
     if offset < 0:
        raise ValueError("Offset < 0")

    #raise error if user try to write beyond permitted file size
     if mycontext['size'] and offset >= mycontext['size']:
        raise SeekPastEndOfFileError("Tried to write past the end!")

    # Write the requested data to the file using the sandbox's writeat call
     if mycontext['size']:
        if offset + len(data) <= mycontext['size']:
         self.file.writeat(data,offset)
         self.fileSize = offset + len(data)
        else:
         self.file.writeat(data[:(mycontext['size'] - offset)], offset)
         self.fileSize = offset + len(data[:(mycontext['size'] - offset)])
     else:
        self.file.writeat(data,offset)
        self.fileSize = offset + len(data)
  finally:
    self.fileSizeLock.release()

 def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

 def close(self):
    self.file.close()

def secure_openfile(filename, create):
 f = openfile(filename,create)
 return SecureFile(f)

def secure_listfiles():
 return listfiles()

def secure_removefile(filename):
 return removefile(filename)
    #The code here sets up type checking and variable hiding for you. You should not need to change anything below here.
 sec_file_def = {"obj-type":SecureFile,
 "name":"SecureFile",
 "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
 "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
 "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
 "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
 }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
