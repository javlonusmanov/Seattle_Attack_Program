"""
This security layer interposes size restrictions on a file.  If a call is made 
to setmaxfilesize, the file must not be allowed to grow larger than the 
specified value.  If a user tries to write that starts before the end of file 
and extends past the allowed size, bytes past the allowed size are discarded.  
If a write starts at or past the allowed size, a SeekPastEndOfFileError must 
be raised.  If a file already contains more than the maximum file size bytes 
when the call is made, the file must be truncated so that it is of the 
appropriate size. It should also raise ValueError if the size to be set is not 
valid(e.g. less than 0 or non-number )



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 


class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file

    self.fileSize = 0
    fileContent = self.file.readat(None, 0)
    self.fileSize = len(fileContent)

    self.fileSizeLock = createlock()

  def setmaxfilesize(self,size):

    self.fileSizeLock.acquire(True)
    try:
      #raise ValueError if size is not an int or long
      if not isinstance( size, ( int, long ) ):
        raise ValueError("size not an int/long")

      #raise ValueError if size is smaller that zero
      if size < 0:
        raise ValueError("size less than zero")
      
      if size < self.fileSize:
        fileContent = self.file.readat(None, 0)
        for i in range(size,self.fileSize):
          self.file.writeat(' ', i)
      mycontext['size'] = size
    finally:
      self.fileSizeLock.release()

  def writeat(self,data,offset):

    self.fileSizeLock.acquire(True)
    try:
      #raise ValueError if offset is not an int or long
      if not isinstance( offset, ( int, long ) ):
        raise ValueError("Offset not an int/long")

      #raise ValueError if Offset is smaller that zero
      if offset < 0:
        raise ValueError("Offset less than zero")

      # Write the requested data to the file using the sandbox's writeat call
      if mycontext['size']:

        #raise error if user try to write beyond permitted file size
        if offset >= mycontext['size']:
          raise SeekPastEndOfFileError("Tried to write past the end!")

        if offset + len(data) <= mycontext['size']:
          self.file.writeat(data,offset)
          if offset < self.fileSize and (offset + len(data)) <= self.fileSize:
            self.fileSize = self.fileSize
          else:
            self.fileSize = offset + len(data)
        else:
          self.file.writeat(data[:(mycontext['size'] - offset)], offset)
          self.fileSize = offset + len(data[:(mycontext['size'] - offset)])
      else:
        self.file.writeat(data,offset)
        if offset < self.fileSize and (offset + len(data)) <= self.fileSize:
            self.fileSize = self.fileSize
        else:
          self.fileSize = offset + len(data)

    finally:
      self.fileSizeLock.release()
  
  def readat(self,bytes,offset):
    try:
      readLine = self.file.readat(bytes,offset)
    finally:
      self.fileSizeLock.release()

    return readLine  

  def close(self):
    self.fileSizeLock.acquire(True)
    self.file.close()
    self.fileSizeLock.release()
    return


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()