class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file
    mycontext['offset'] = 0

  def setmaxfilesize(self,size):
    try:
      size = int(size)
      if(size>0):
        mycontext['size']=size
        if(len(mycontext['data'])>mycontext['size']):
          temp_data = mycontext['data'][0:mycontext['size']]
          self.file.writeat(temp_data,mycontext['offset'])
          
          
          read_str = self.file.readat(None,0)
          trunc = read_str[0:mycontext['size']]
          self.file.writeat(trunc,0)
          
      else:
        size = 0
        mycontext['size']=size
        raise ValueError("Not a valid value for size")
    except ValueError,e:
      temp = e
      raise 

  def writeat(self,data,offset):
    mycontext['offset'] = offset
    mycontext['data'] = data
    try:
      if (mycontext['size'] and offset >= mycontext['size']) or len(data) >= mycontext['size']:
        if len(data) >= mycontext['size'] and mycontext['size'] is not None:
          truncated = data[0:mycontext['size']-offset]
          self.file.writeat(truncated,offset)
          raise SeekPastEndOfFileError("Tried to write past the end!")
    except SeekPastEndOfFileError,e:              
      t = e
    
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
