TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class MaxSizeFileWrite():
	def _init_(self,file):
		self.file=file
		mycontext['max']=None
	
	def setmaxfilesize(self,max):
		mycontext['max']=max
	
	def writeat(self,data,offset):
		if offset>=mycontext['max']:
			raise SeekPastEndOfFileError("Tried to Start beyond max file Size")
		elif offset+len(data)>=mycontext['max']:
			raise SeekPastEndOfFileError("Data exceeds max file Size")
		else:
			self.file.writeat(data,offset)
			
	def readat(self,bytes,offset):
		return self.file.readat(bytes,offset)
	def close(self):
		return self.file.close()
		
def secure_openfile(filename, create):
	f = openfile(filename,create)
	return SecureFile(f)

def secure_listfiles():
	return listfiles()

def secure_removefile(filename):
	return removefile(filename)
 
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

secure_dispatch_module()