class SecureFile():
	def __init__(self,file,filename):
    # globals
		mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
		mycontext['size'] = None
    # local (per object) reference to the underlying file
		self.file = file
		self.filename=filename
		
	
	def setmaxfilesize(self,size):
	# size check for integer or >= 0
		
		try:
			size=int(size)
			
			if(size>=0):
				mycontext['size'] = size
	# logic to truncate the file	when size exceeds allowed filesize	
				data=self.file.readat(None,0)
				filelength=len(data)
				if(filelength>size):
					self.file.close()
					removefile(self.filename)
					self.file=openfile(self.filename,True)
					self.file.writeat(data[:size],0)
				
			else:
				raise ValueError("Incorrect size!!")
		except ValueError:
			raise ValueError("Incorrect size!!")
		

	def writeat(self,data,offset):
	
	# check for offset value >=0 and integer
		try:
			offset=int(offset)
			if(offset>=0):
	# condition to check offset size >= maximum allowed size
				if mycontext['size'] and offset>= mycontext['size']:
					raise SeekPastEndOfFileError("Tried to write past the end!")
	# condition to check if offset < maximum size limit with data to write then append data up to maximum allowed size
				elif mycontext['size'] and (offset+len(data)) >= mycontext['size']:
					substrlen=mycontext['size']-offset
					self.file.writeat(data[:substrlen],offset)
	# normal write operation when size constraint is not applied
				else:
					self.file.writeat(data,offset)
			else:
				raise ValueError("Incorrect Offset!!")
		except ValueError:
			raise ValueError("Incorrect offset!!")
	
	def readat(self,bytes,offset):
		return self.file.readat(bytes,offset)
	
	def close(self):
		return self.file.close()

def secure_openfile(filename, create):
	f = openfile(filename,create)
	return SecureFile(f,filename)

def secure_listfiles():
	return listfiles()

def secure_removefile(filename):
	return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()