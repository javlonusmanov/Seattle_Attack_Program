"""
This security layer interposes size restrictions on a file.  

If a call is made to setmaxfilesize, the file must not be allowed to grow larger than the 
specified value. 

If a user tries to write that starts before the end of file 
and extends past the allowed size, bytes past the allowed size are discarded.

If a write starts at or past the allowed size, a SeekPastEndOfFileError must 
be raised. 

If a file already contains more than the maximum file size bytes 
when the call is made, the file must be truncated so that it is of the 
appropriate size. It should also raise ValueError if the size to be set is not 
valid(e.g. less than 0 or non-number )



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """

class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    # Size is set to None
    mycontext['size'] = 0
    # local (per object) reference to the underlying file
    self.file = file
    # Keep track file data size
    mycontext['FileContentSize'] = 0

  def setmaxfilesize(self,size):
    
    strSize = str(size)
    
    if strSize.isdigit():
      
      # Default maximum size for a file is 100
      if size <= 100 and size > 0:
        mycontext['size'] = size
      
      # Raise exception if size requested is larger than default
      else:
        raise RepyException("Please enter a valid maximum file size.")
    
    # Raise exception if size value is not an integer
    else:
      raise RepyException("Please enter a valid maximum file size. The value must be an integer.")
   
      
  def writeat(self, data, offset):
    
    # If max size not set - Set default for maximum file size to 1
    if mycontext['size'] == 0 and mycontext['FileContentSize'] == 0:
      mycontext['size']  = 100
    
    if type(data) != str:
      raise RepyException("Please enter valid data. Text written to files must be strings.")
    
    offStr =  str(offset)
    
    # Raise error if offset is not a digit
    if offStr.isdigit():
      pass
    else: 
      raise RepyException("Offset is not a digit. Please enter a valid offset.")
    

    # Shorten string to maximum size of file
    if len(data) > (mycontext['size'] - offset) and offset < mycontext['size']:
      dataList = list(data)
      del dataList[(mycontext['size'] - offset):]
      data = ''.join(dataList)

    
    # Raise error if user tries to write beyond permitted file size
    if mycontext['size'] and offset >= mycontext['size']:
      raise SeekPastEndOfFileError("Tried to write past the end!")
    
    # Write the requested data to the file using the sandbox's writeat call
    self.file.writeat(data,offset)
    
    # Store file's data length
    if data:
      mycontext['FileContentSize'] += len(data)
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()
    



def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()