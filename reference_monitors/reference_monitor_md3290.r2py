class SecureFile():
  def __init__(self,file):
    mycontext['debug'] = False  
    mycontext['size'] = None
    self.file = file

  def setmaxfilesize1(self,size):
    mycontext['size'] = size
	
  def writeat(self,data,offset):
    
    if mycontext['size'] and offset >= mycontext['size']:
      raise SeekPastEndOfFileError("Tried to write past the end!")
    self.file.writeat(data,offset)
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()

def setmaxfilesize1(self,size):
  if size > mycontext['size']:
	mycontext['size'].truncate( [ size ])
    
	
def checksizevalue1(self,size):
  if type(mycontext['size']) != int:
    raise ValueError1("Tried to set size value to non-number")	
	
def checksizevalue2(self,size):
  if mycontext['size'] = 0:
    raise ValueError2("Tried to set size value to zero")	
	
def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)


sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile


secure_dispatch_module()