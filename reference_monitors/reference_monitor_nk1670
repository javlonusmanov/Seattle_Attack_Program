class SecureFile():
  def __init__(self,file):
  
    mycontext['debug'] = False   
    
    mycontext['size'] = None
   
    self.file = file
    info = str

  def setmaxfilesize(self,size):
    size=int(size)
    log(size)
    log(mycontext['size'])
    log(size)
   

  def writeat(self,data,offset):
    if offset < 0 or offset == str :
     raise ValueError("enter valid file size")


    

    if mycontext['size'] and offset >= mycontext['size']:
   
      raise SeekPastEndOfFileError("Tried to write past the end!")

    if mycontext['size'] > offset:
      space = mycontext['size'] -  offset
      data = data[:space]
    
    
    self.file.writeat(data,offset)
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
