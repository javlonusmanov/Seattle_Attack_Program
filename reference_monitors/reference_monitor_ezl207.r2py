##Eric Liang NetId: ezl207 Assignment 2 part 1

class SecureFile():
  
  def __init__(self,file,filename):
    # globals
    mycontext['debug'] = False
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file
    self.filename = filename

  def setmaxfilesize(self,size):

    #Checking if size is a valid type
    if type(size) != int:
      raise RepyArgumentError("Size is not of type \"int\"")

    #checking if the size passed is a valid number
    if size < 0:
      raise RepyArgumentError("Invalid size is passed")
	#
    if size == mycontext['size']:
      return
    
    #temporary varaible to hold the file  
    temp = self.file.readat(None,0)  

    #if current file needs to be truncated
    if(size < len(temp)):
      #storing a truncated file in a string

      #get a truncated file from the temp variable
      temp = temp[:size]

##************ Note: I couldn't find a good way to truncate a file in repy so I used the remove****************
##  ************ file and open file to recreate a file of a smaller size *****************

      self.file.close()
      removefile(self.filename)
      self.file = openfile(self.filename,True)
      #write the truncated file
      self.file.writeat(temp,0) 

    #change the size 
    mycontext['size'] = size

  def writeat(self,data,offset):
  
    #raise error if a negative offset is passed
    if offset < 0:
      raise RepyArgumentError("Cannot write to a negative offset")

    #raise error if user tries to write beyond permitted file size
    if mycontext['size'] and offset >= mycontext['size']:
      raise SeekPastEndOfFileError("Tried to write past the end!")

    # Write the requested data to the file using the sandbox's writeat call

    #If a filesize is not set yet then just write
    if mycontext['size'] == None:
      self.file.writeat(data,offset)

    #If a filesize is set then only write up to the max filesize
    else:
      for i in xrange(len(data)):
        if(i+offset < mycontext['size']):
          self.file.writeat(data[i],offset+i)
        else:
          break

  def readat(self,bytes,offset):
    #In case a read occurs when size is 0
    if mycontext['size'] == 0:
       #returns a empty string to help with string operations
       return ""
    else:
       return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f,filename)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
