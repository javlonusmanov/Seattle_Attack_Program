"""

Stephen Luk
skl348 (N12305989)
Assignment 2 Part 1

** This is a modification of the sample defense posted on Seattle website **
    
""" 


class SecureFile():
  def __init__(self,file, filename):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file
    self.filename = filename

  #if the size is greater than current, set new size and append space characters the length of the increased size
  #else if less than current, truncate the characters that exceeded the limit
  def setmaxfilesize(self,size):
    
    if mycontext['size'] and size > mycontext['size']:
      numspaces = size - mycontext['size']
      writeoffset = mycontext['size']
      #update size to specified size
      mycontext['size'] = size
      self.file.writeat(' ' * numspaces, writeoffset)
      return
    
    elif mycontext['size'] and size < mycontext['size']:
      #store original data up to the point of truncation (read file up to "size" bytes from the beginning)
      originaldata = self.file.readat(size,0)
      
      #close the currently opened file and remove it
      self.file.close()
      removefile(self.filename)
      
      #open new file with same name and rewrite to it the original contents stored previously
      self.file = openfile(self.filename, True)
      self.file.writeat(originaldata, 0)
      
      #update new file size
      mycontext['size'] = size	
      return
    
    mycontext['size'] = size
      
  def writeat(self,data,offset):
	
    #do not raise error even if user try to write beyond permitted file size
    #writeat does nothing if this is the situation
    if mycontext['size'] and offset >= mycontext['size']:
      return
    
    #if offset is a valid value and the length of data is longer than 
    #allowed length of data from offset to end of the file, truncate
    
    elif mycontext['size'] and offset < mycontext['size'] and len(data) > mycontext['size'] - offset:
      self.file.writeat(data[:-(len(data) - (mycontext['size'] - offset))], offset) #write to file the slice of the data string, to maintain file size requirement
      return
    
    # Write the requested data to the file using the sandbox's writeat call
    self.file.writeat(data,offset)
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f, filename)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
