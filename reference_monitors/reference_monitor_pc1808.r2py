class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file

  def setmaxfilesize(self,size):
    mycontext['size'] = size

  def writeat(self,data,offset):
	
	#raise error if user try to write beyond permitted file size 
		if mycontext['size'] and offset>=0:
			try:
				self.file.readat(1,mycontext['size'])

			except:
				if offset >= mycontext['size']:
					pass
				else:
					for i in data:
						try:
							self.file.readat(1,mycontext['size'])
						except:
							try:
								self.file.writeat(i,offset)
							except:
								pass
							else:
								offset=offset+1
						else:
							pass
			
			else:												#if the file exceeds the maxsize, truncate
				f=self.file.readat(mycontext['size'],0)
				self.file.close()
				secure_removefile("testfile.txt")
				fn=secure_openfile("testfile.txt",True)
				fn.writeat(f,0)

		else:
			#Write the requested data to the file using the sandbox's writeat call
			self.file.writeat(data,offset)
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()