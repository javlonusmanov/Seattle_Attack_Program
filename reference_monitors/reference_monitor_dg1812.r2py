class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file

  def setmaxfilesize(self,size):
    if mycontext['size']:
      return
    else:
      mydata = self.file.readat(None, 0)
      if len(mydata) > size:
      	newdata = self.file.readat(size, 0)
      	self.file.close()
      	removefile(mycontext['name'])
      	self.file = openfile(mycontext['name'], True)
        self.file.writeat(newdata, 0)
        #raise SeekPastEndOfFileError("File too big!")
      mycontext['size'] = size

  def writeat(self,data,offset):
    if offset < 0:
      raise SeekPastEndOfFileError("Tried to write past the end!")
      return
    if mycontext['size']:
      if offset >= mycontext['size']:
        raise SeekPastEndOfFileError("Tried to write past the end!")
        return
      else:
        data = data[:mycontext['size'] - offset]
    self.file.writeat(data,offset)

  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()

def secure_openfile(filename, create):
  f = openfile(filename,create)
  mycontext['name'] = filename
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)

# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()