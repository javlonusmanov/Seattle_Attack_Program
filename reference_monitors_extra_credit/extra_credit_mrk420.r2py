

class SecureFile():
  def __init__(self,file):
    
    mycontext['debug'] = False 
    mycontext['size'] = None
    mycontext['tmd']=None
    
    self.file = file

  def setmaxfilesize(self,size):
    mycontext['size'] = size
    mycontext['tmd'] = 10

  def writeat(self,data,offset):

        if mycontext['tmd'] and offset >= mycontext['tmd']:
            raise SeekPastEndOfFileError("Tried to write past the end")
        elif offset < mycontext['tmd']:
          l=list(data)
          d=list(l[0:mycontext['tmd']-offset])
          f= "".join(d)
          self.file.writeat(f,offset)
          if len(l)>(mycontext['tmd']-offset):
            raise SeekPastEndOfFileError("Tried to write past the end")
        elif offset==0:
          self.file.writeat(data,offset)
        
          
    
    
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)


  def close(self):
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)




sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close},
                
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile


secure_dispatch_module()