"""
This security layer interposes size restrictions on a file.  If a call is made 
to setmaxfilesize, the file must not be allowed to grow larger than the 
specified value.  If a user tries to write that starts before the end of file 
and extends past the allowed size, bytes past the allowed size are discarded.  
If a write starts at or past the allowed size, a SeekPastEndOfFileError must 
be raised.  If a file already contains more than the maximum file size bytes 
when the call is made, the file must be truncated so that it is of the 
appropriate size. It should also raise ValueError if the size to be set is not 
valid(e.g. less than 0 or non-number )



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
"""    
     


class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    mycontext['size'] = None
    # local (per object) reference to the underlying file
    self.file = file
    # Global file size
    mycontext['gsize'] = 0
    
   
  def setmaxfilesize(self,size):       
    if size<=0:
      raise ValueError
    try:
      dig = size.isdigit()
      if dig == False:
        raise ValueError
    except AttributeError:
      pass
    fil = self.file.readat(None,0)
    log('Content of file')
    log(fil)
    if fil is not None:
      lngth = len(fil)
      log(lngth)
    if lngth > size :
      #self.file.writeat(0x04,size)
      dif = lngth - size
      for x in range(size,size+dif):
        self.file.writeat(' ',x)
    mycontext['size'] = size

  def writeat(self,data,offset):
    if mycontext['size']== None:
      mycontext['size'] = mycontext['gsize']
      #mysize = self.file.readat(None,0)
      #if mysize is not None:
      # mycontext['size'] = len(mysize)
    size = mycontext['size']
    #Condition for existing file going over allowed size
    fil = self.file.readat(None,0)
    if fil is not None:
      length = len(fil)
    if length<offset and offset<size:
      for x in range(length,offset):
        self.file.writeat(" ",x)
 
    x = size-offset
    #raise error if user try to write beyond permitted file size
    if (size and offset >= size) or len(data) >= x:
      if len(data) >= x:
        str = data[0:x]
        self.file.writeat(str,offset)
      raise SeekPastEndOfFileError("Tried to write past the end!")
    
    # Write the requested data to the file using the sandbox's writeat call
    self.file.writeat(data,offset)
  
  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  #Changed the definition of close to get value of size from previous setfilesize
  def close(self,size):
    mycontext['gsize'] = size
    return self.file.close()


def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)


# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":((int,long,type(None))),"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
