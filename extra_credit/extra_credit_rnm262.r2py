"""
This security layer interposes on a textfile and gives it read, write, or append access.
A user can only read, write, or append to that file when that specific mode is enabled for that file.   Multiple files can be be simultaneously opened and have different modes.

Read-only: You may read the contents of a file, but not write or append.
If you attempt to read when read mode is disabled, a ValueError is raised.

Write-only: You may overwrite the contents of a file, but not append to the file.
If you attempt to do so, the file should be overwritten to the length of the file, and then writing stops.

Append-only: You may append data to the end of the file, but not overwrite 
anything that is already written.   If a write starts before the end of the
file, but continues afterward, only the data after the current end of
file should be written.

More than one mode may be enabled at once, e.g. Write and Append allows you to overwrite existing file data and append data to the end of the file.

writeat must return a ValueError if and only if both write and append are 
blocked.  readat must return a value error if and only if read is blocked.   

For efficiency purposes, you *MUST NOT* call readat inside of writeat.   It
is fine to call readat during file open if desired.


Extra credit (?): remember permissions for files after they are closed and
reopened.   This would include situations where your security layer is itself
closed and reopened (for example, if the system restarts).   You can assume
that all reads must go through your security layer and so you can add an 
additional file or modify the file format.

Note:
    This security layer uses encasementlib.repy, restrictions.default, repy.py and python
    Also you need to give it an application to run.
    This security layer never runs explicitly but instead interposes functions
    from above layers.
    
    """ 





TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class SecureFile():
  def __init__(self,file,size):

    # globals reference 
    mycontext['debug'] = False   
    mycontext['read'] = False
    mycontext['write'] = False
    mycontext['append'] = False
    # local reference to the underlying file
    self.file = file
    self.size= size

  def setmaxfilesize(self,size):
    self.size=size

  def setappend(self,enabled):
    mycontext['append'] = enabled

  def setread(self,enabled):
    mycontext['read'] = enabled

  def setwrite(self,enabled):
    mycontext['write'] = enabled

  def readat(self,bytes,offset):
    try:
      if not mycontext['read']:
        return
      else:
        return self.file.readat(bytes,offset)
    except ValueError:
      pass
  def writeat(self,data,offset):
      if not mycontext['write']:
        log("inside write")
        return
      if not mycontext['append']:
        return
      self.file.writeat(data,offset)
    
      if ((mycontext['write'])) and ((mycontext['append'])):
        log("inside write")
        if ( offset <= (mycontext['size'])):
          mycontext['size'] = len(data) + size
    
        elif ( ( not(mycontext['write'])) and ((mycontext['append'])) ):
          log("inside1")
          if( offset < mycontext['size'] ):
            data = data[mycontext['size']- offset]
            offset = mycontext['size']
            mycontext['size'] = mycontext['size'] + len(data)
        elif ((mycontext['write']) and (not mycontext['append'])):
           log("inside2")
           if( len(data)+ offset > mycontext['size'] ):
            data = data[mycontext['filesize']- offset]
      else:
        return
      self.file.writeat(data,offset)
  
  def close(self):
    saveFile = openfile("saveperm.txt", True)
    stat = str(permSet).strip('set([])')
    saveFile.writeat(stat, 0)
    saveFile.close
    return self.file.close()


sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "readat":{TYPE:FUNC,ARGS:((int,long),(int,long)),EXCP:Exception,RETURN:(str,type(None)),TARGET:SecureFile.readat},
                "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(int,type(None)),TARGET:SecureFile.writeat},
                "setwrite":{TYPE:FUNC,ARGS:[bool],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setwrite},
                "setread":{TYPE:FUNC,ARGS:[bool],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setread},
                "setappend":{TYPE:FUNC,ARGS:[bool],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setappend},
                "setmaxfilesize":{TYPE:FUNC,ARGS:[int],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setmaxfilesize},
                "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
           }
def secure_openfile(filename, create):
  f = openfile(filename,create)
  try:
    permF = openfile("saveperm.txt", False)
    permFList = permF.read(None, 0).rstrip(',').split(',')
    pSet = set()
    while(len(permFList) != 0):
      i = int(permFList.pop())
      pSet.add(i)
    permF.close()
    return SecureFile(f, pSet)
  except:
    pass
  return SecureFile(f, 10)

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()