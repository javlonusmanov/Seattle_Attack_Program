"""
This security layer interposes size restrictions on a file.  If a call is made 
to setmaxfilesize, the file must not be allowed to grow larger than the 
specified value.  If a user tries to write that starts before the end of file 
and extends past the allowed size, bytes past the allowed size are discarded.  
If a write starts at or past the allowed size, a SeekPastEndOfFileError must 
be raised.  If a file already contains more than the maximum file size bytes 
when the call is made, the file must be truncated so that it is of the 
appropriate size. It should also raise ValueError if the size to be set is not 
valid(e.g. less than 0 or non-number )



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
#We set this global dictionary in order to maintain the maximum size after closing a file
#one entry for each opened file
mycontext['size'] = {}

class SecureFile():
  def __init__(self, file, filename):
    # globals
    mycontext['debug'] = False   
    # starts as "None", which allows writes of any size.
    if (filename not in mycontext['size']):
      mycontext['size'][filename] = None

    # local (per object) reference to the underlying file
    self.file = file
    self.filename = filename
    self.size = mycontext['size'][filename]

  def setmaxfilesize(self, size):
    #check for valid input
    if ((type(size) is not int) and (type(size) is not long) and (type(size) is not type(None))) or (((type(size) is int) or (type(size) is long)) and (size < 0)):
      raise ValueError("Invalid Input")
    else:
      #set the maximun size
      mycontext['size'][self.filename] = size
      self.size = size

      #truncate the file
      data = self.file.readat(None, 0)
      lenData = len(data)
      if (size < lenData):
        data = data[:size]
        #close - remove - reopen the file in order to remove its content
        self.file.close()
        removefile(self.filename)
        self.file = openfile(self.filename, True)
        self.file.writeat(data, 0)

  def writeat(self, data, offset):
    #check of valid inputs
    if ((type(offset) is not int) and (type(offset) is not long)) or (offset < 0) or (type(data) is not str) or (not data):
      raise ValueError("Invalid Input")
    else:
      #check if size limit is set (not None)
      if (self.size is not None):
        #raise error if user try to write beyond permitted file size
        if (offset >= self.size):
          raise SeekPastEndOfFileError("Tried to write past the end!")
        else:
          #check for write that starts before the end of file and extends beyond the allowed size
          if ((offset + len(data)) > self.size):
            data = data[:(self.size - offset)]
      #write the requested data to the file using the sandbox's writeat call
      self.file.writeat(data, offset)
 
  def readat(self, bytes, offset):
    #readat throws the appropriate exceptions for invalid inputs etc
    return self.file.readat(bytes, offset)

  def close(self):
    return self.file.close()



def secure_openfile(filename, create):
  f = openfile(filename, create)
  return SecureFile(f, filename)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)



# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()
