"""______________________________________________________________________________________________________________________________________________________
EXTRA CREDIT FEATURE:
If a particular file (identified using an extra attribute) is close and opened again, the maximum length of the file which was set earlier is retrieved
and automatically assigned

This security layer implements the following functions:

DONE!! 1)The maximum file size is set and if a user tries to write data that starts before the end of file 
         and extends past the allowed size, bytes past the allowed size are discarded.
DONE!! 2)If a write starts at the wrong offset or tries to write past the allowed size, a SeekPastEndOfFileError must be raised.  
DONE!! 3)If a file to be written already contains more than the maximum file size bytes and when the call to writeat() is made, 
         the file must be truncated so that it is of the appropriate size.
DONE!! 4) It should also raise ValueError/NameError if the size value to be set is not valid(e.g. less than 0 or non-number )
DONE!! 5) It should also raise ValueError/NameError if the offset value to be set is not valid(e.g. less than 0 or non-number )	
DONE!! 6) If a call is made to setmaxfilesize() second time onwards, the file size would not be allowed to change

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py
__________________________________________________________________________________________________________________________________________________________________	
""" 
#Dictionary for mapping the file size with the file_name
fileandsize={}

class SecureFile():
  def __init__(self,file,file_name):
    #globals
    if file_name in fileandsize:
      mycontext['size']=fileandsize[file_name]
    else:
      mycontext['size']=0
    mycontext['truncated']=0
    mycontext['exists']=0
    mycontext['data']=""
    #local (per object) reference to the underlying file
    fileandsize[self.file_name]=mycontext['size']
    self.file = file
    
  def setmaxfilesize(self,size):  
    #To check whether the vale of the entered size is valid or not
    if type(size) is not int or size < 0 :
      raise ValueError("Invalid Size Value entry")
	# To check whether the value entered is a valid entry (number)
    if mycontext['exists']==1 and size<mycontext['size']:
      mycontext['size'] = size
      self.writeat(mycontext['data'][0:size],0)
    else:
      mycontext['size'] = size

  def writeat(self,data,offset):
    #checking whether the value of offset is valid
    if type(offset) is not int or offset < 0 :
      raise ValueError("Invalid Offset Value entry")
    
    #the size of the data to be written
    datasize = len(data)
    filedatasize = len(self.readat(None,0))
    
    #raise error if user try to write beyond permitted file size
    if mycontext['size'] and offset >= mycontext['size']:
      raise SeekPastEndOfFileError("Tried to write past the end!")
      
	#if the data written initially is bigger than the write limit, it is truncated to maximum file size, otherwise written normally
    if offset==0:
      if datasize <= mycontext['size']:
        self.file.writeat(data,offset)
      else:
        self.file.writeat(data[0:mycontext['size']],offset)
        mycontext['truncated']=1
    
	# if the data to be written at the offset goes beyond the maximum file size limit,then data is truncated appropriately to stay within 
	#the maxfilesize and written
    elif offset < mycontext['size'] and mycontext['truncated']==0:
      self.file.writeat(data[0:mycontext['size']-offset],offset)
    	
    mycontext['exists']=1
    mycontext['data']=data

  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def close(self):
    return self.file.close()

def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f,filename)

def secure_listfiles():
  return listfiles()

def secure_removefile(filename):
  return removefile(filename)


# The code here sets up type checking and variable hiding for you.  You should not need to change anything below here.
sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setmaxfilesize":{"type":"func","args":(int,long, type(None)),"exceptions":Exception,"return":(type(None)),"target":SecureFile.setmaxfilesize},
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":SecureFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":SecureFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":SecureFile.close}
           }

CHILD_CONTEXT_DEF["openfile"]["target"] = secure_openfile
CHILD_CONTEXT_DEF["listfiles"]["target"] = secure_listfiles
CHILD_CONTEXT_DEF["removefile"]["target"] = secure_removefile

# Execute the user code
secure_dispatch_module()